/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
        int gcd(int a, int b){
        if (b == 0) return a;
        else return gcd(b, a % b);
    }
    ListNode* insertGreatestCommonDivisors(ListNode* head) {

        if (head == NULL || head->next == NULL) return head;
        ListNode *current = head;

        while(current != NULL && current->next != NULL){
            int gcdValue = gcd(current->val, current->next->val);
            ListNode *gcdNode = new ListNode(gcdValue);

            gcdNode->next = current->next;
            current->next = gcdNode;
            current = gcdNode->next;
        }
        return head;
    }

};

////////////////////////////////////////////////////////////

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode insertGreatestCommonDivisors(ListNode head) {
        if (head == null || head.next == null) return head;

        ListNode current = head;
        while (current != null && current.next != null){
            int gcdValue = gcd(current.val, current.next.val);
            ListNode gcdNode = new ListNode(gcdValue);

            gcdNode.next = current.next;
            current.next = gcdNode;

            current = gcdNode.next;
        }
        return head;

    }
    private int gcd(int a, int b){
        if (b == 0) return a;
        return gcd(b, a % b);
    }
}
